import sift from 'sift';

function ForbiddenError(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  Error.call(this);
  this.constructor = ForbiddenError;
  this.subject = options.subject;
  this.subjectName = options.subjectName;
  this.action = options.action;
  this.field = options.field;
  this.message = message || 'Cannot execute "' + this.action + '" on "' + this.subjectName + '"';

  if (typeof Error.captureStackTrace === 'function') {
    this.name = this.constructor.name;
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error(this.message).stack;
  }
}

ForbiddenError.prototype = Object.create(Error.prototype);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

function wrapArray(value) {
  return Array.isArray(value) ? value : [value];
}

function getSubjectName(subject) {
  if (!subject || typeof subject === 'string') {
    return subject;
  }

  var Type = (typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) === 'object' ? subject.constructor : subject;

  return Type.modelName || Type.name;
}

var Rule = function () {
  function Rule(params) {
    classCallCheck(this, Rule);

    this.actions = params.actions || params.action;
    this.subject = params.subject;
    this.fields = !params.fields || params.fields.length === 0 ? undefined : wrapArray(params.fields);
    this.inverted = !!params.inverted;
    this.conditions = params.conditions;
    this._matches = this.conditions ? sift(this.conditions) : undefined;
    this.reason = params.reason;
  }

  Rule.prototype.matches = function matches(object) {
    if (!this._matches) {
      return true;
    }

    if (typeof object === 'string') {
      return !this.inverted;
    }

    return this._matches(object);
  };

  Rule.prototype.isRelevantFor = function isRelevantFor(object, field) {
    if (!this.fields) {
      return true;
    }

    if (!field) {
      return !this.inverted;
    }

    return this.fields.indexOf(field) !== -1;
  };

  return Rule;
}();

function clone(object) {
  return JSON.parse(JSON.stringify(object));
}

var DEFAULT_ALIASES = {
  manage: ['create', 'read', 'update', 'delete']
};
var PRIVATE_FIELD = typeof Symbol !== 'undefined' ? Symbol('private') : '__' + Date.now();

var Ability = function () {
  Ability.addAlias = function addAlias(alias, actions) {
    if (alias === actions || Array.isArray(actions) && actions.indexOf(alias) !== -1) {
      throw new Error('Attempt to alias action to itself: ' + alias + ' -> ' + actions.toString());
    }

    DEFAULT_ALIASES[alias] = actions;
    return this;
  };

  function Ability(rules) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$RuleType = _ref.RuleType,
        RuleType = _ref$RuleType === undefined ? Rule : _ref$RuleType,
        _ref$subjectName = _ref.subjectName,
        subjectName = _ref$subjectName === undefined ? getSubjectName : _ref$subjectName;

    classCallCheck(this, Ability);

    this[PRIVATE_FIELD] = {
      RuleType: RuleType,
      subjectName: subjectName,
      originalRules: rules || [],
      rules: {},
      events: {},
      aliases: clone(DEFAULT_ALIASES)
    };
    this.update(rules);
  }

  Ability.prototype.update = function update(rules) {
    if (Array.isArray(rules)) {
      var payload = { rules: rules, ability: this };

      this.emit('update', payload);
      this[PRIVATE_FIELD].originalRules = Object.freeze(rules.slice(0));
      this[PRIVATE_FIELD].rules = this.buildIndexFor(this.rules);
      this.emit('updated', payload);
    }

    return this;
  };

  Ability.prototype.buildIndexFor = function buildIndexFor(rules) {
    var indexedRules = {};
    var RuleType = this[PRIVATE_FIELD].RuleType;


    for (var i = 0; i < rules.length; i++) {
      var rule = new RuleType(rules[i]);
      var actions = this.expandActions(rule.actions);
      var subjects = wrapArray(rule.subject);

      for (var k = 0; k < subjects.length; k++) {
        var subject = subjects[k];
        indexedRules[subject] = indexedRules[subject] || {};

        for (var j = 0; j < actions.length; j++) {
          var action = actions[j];
          indexedRules[subject][action] = indexedRules[subject][action] || [];
          indexedRules[subject][action].unshift(rule);
        }
      }
    }

    return indexedRules;
  };

  Ability.prototype.expandActions = function expandActions(rawActions) {
    var aliases = this[PRIVATE_FIELD].aliases;

    var actions = wrapArray(rawActions);
    var i = 0;

    while (i < actions.length) {
      var action = actions[i++];

      if (aliases.hasOwnProperty(action)) {
        actions = actions.concat(aliases[action]);
      }
    }

    return actions;
  };

  Ability.prototype.can = function can(action, subject, field) {
    var rule = this.relevantRuleFor(action, subject, field);

    return !!rule && !rule.inverted;
  };

  Ability.prototype.relevantRuleFor = function relevantRuleFor(action, subject, field) {
    var rules = this.rulesFor(action, subject, field);

    for (var i = 0; i < rules.length; i++) {
      if (rules[i].matches(subject)) {
        return rules[i];
      }
    }

    return null;
  };

  Ability.prototype.possibleRulesFor = function possibleRulesFor(action, subject) {
    var subjectName = this[PRIVATE_FIELD].subjectName(subject);
    var rules = this[PRIVATE_FIELD].rules;

    var specificRules = rules.hasOwnProperty(subjectName) ? rules[subjectName][action] : null;
    var generalRules = rules.hasOwnProperty('all') ? rules.all[action] : null;

    return (specificRules || []).concat(generalRules || []);
  };

  Ability.prototype.rulesFor = function rulesFor(action, subject, field) {
    return this.possibleRulesFor(action, subject).filter(function (rule) {
      return rule.isRelevantFor(subject, field);
    });
  };

  Ability.prototype.cannot = function cannot() {
    return !this.can.apply(this, arguments);
  };

  Ability.prototype.throwUnlessCan = function throwUnlessCan() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var rule = this.relevantRuleFor.apply(this, args);

    if (!rule || rule.inverted) {
      var action = args[0],
          subject = args[1],
          field = args[2];

      var subjectName = this[PRIVATE_FIELD].subjectName(subject);

      throw new ForbiddenError(rule ? rule.reason : null, {
        action: action,
        subjectName: subjectName,
        subject: subject,
        field: field
      });
    }
  };

  Ability.prototype.on = function on(event, handler) {
    var events = this[PRIVATE_FIELD].events;

    var isAttached = true;

    if (!events[event]) {
      events[event] = [];
    }

    events[event].push(handler);

    return function () {
      if (isAttached) {
        var index = events[event].indexOf(handler);
        events[event].splice(index, 1);
        isAttached = false;
      }
    };
  };

  Ability.prototype.emit = function emit(event, payload) {
    var handlers = this[PRIVATE_FIELD].events[event];

    if (handlers) {
      handlers.forEach(function (handler) {
        return handler(payload);
      });
    }
  };

  createClass(Ability, [{
    key: 'rules',
    get: function get$$1() {
      return this[PRIVATE_FIELD].originalRules;
    }
  }]);
  return Ability;
}();

function isStringOrNonEmptyArray(value) {
  return ![].concat(value).some(function (item) {
    return typeof item !== 'string';
  });
}

function isObject(value) {
  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}

var RuleBuilder = function () {
  function RuleBuilder(rule) {
    classCallCheck(this, RuleBuilder);

    this.rule = rule;
  }

  RuleBuilder.prototype.because = function because(reason) {
    this.rule.reason = reason;
    return this;
  };

  return RuleBuilder;
}();

var AbilityBuilder = function () {
  AbilityBuilder.define = function define(params, dsl) {
    var options = typeof params === 'function' ? {} : params;
    var define = params === options ? dsl : params;
    var builder = new this(options);
    var result = define(builder.can.bind(builder), builder.cannot.bind(builder));
    var buildAbility = function buildAbility() {
      return new Ability(builder.rules, options);
    };

    return result && typeof result.then === 'function' ? result.then(buildAbility) : buildAbility();
  };

  AbilityBuilder.extract = function extract() {
    var builder = new this();

    return {
      can: builder.can.bind(builder),
      cannot: builder.cannot.bind(builder),
      rules: builder.rules
    };
  };

  function AbilityBuilder() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$subjectName = _ref.subjectName,
        subjectName = _ref$subjectName === undefined ? getSubjectName : _ref$subjectName;

    classCallCheck(this, AbilityBuilder);

    this.rules = [];
    this.subjectName = subjectName;
  }

  AbilityBuilder.prototype.can = function can(actions, subject, conditionsOrFields, conditions) {
    if (!isStringOrNonEmptyArray(actions)) {
      throw new TypeError('AbilityBuilder#can expects the first parameter to be an action or array of actions');
    }

    var subjectName = [].concat(subject).map(this.subjectName);

    if (!isStringOrNonEmptyArray(subjectName)) {
      throw new TypeError('AbilityBuilder#can expects the second argument to be a subject name/type or an array of subject names/types');
    }

    var rule = { actions: actions, subject: subjectName };

    if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {
      rule.fields = conditionsOrFields;
    }

    if (isObject(conditions) || !rule.fields && isObject(conditionsOrFields)) {
      rule.conditions = conditions || conditionsOrFields;
    }

    this.rules.push(rule);

    return new RuleBuilder(rule);
  };

  AbilityBuilder.prototype.cannot = function cannot() {
    var builder = this.can.apply(this, arguments);
    builder.rule.inverted = true;

    return builder;
  };

  return AbilityBuilder;
}();

export { Ability, Rule, RuleBuilder, AbilityBuilder, ForbiddenError };
